// <auto-generated />
using System;
using AESP.Repository.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AESP.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925124745_AddRoomandSkillAndSkillMentor")]
    partial class AddRoomandSkillAndSkillMentor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AESP.Repository.Models.Achievement", b =>
                {
                    b.Property<Guid>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointsReward")
                        .HasColumnType("int");

                    b.HasKey("AchievementId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("AESP.Repository.Models.AnswerOption", b =>
                {
                    b.Property<Guid>("AnswerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("AESP.Repository.Models.Assessment", b =>
                {
                    b.Property<Guid>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("NumberOfQuestion")
                        .HasColumnType("float");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssessmentId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("AESP.Repository.Models.AssessmentDetail", b =>
                {
                    b.Property<Guid>("AssessmentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AI_Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MentorFeedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssessmentDetailId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AssessmentDetails");
                });

            modelBuilder.Entity("AESP.Repository.Models.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PracticeSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.HasIndex("LearnerProfileId");

                    b.HasIndex("MentorScheduleId");

                    b.HasIndex("PracticeSessionId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AESP.Repository.Models.Challenge", b =>
                {
                    b.Property<Guid>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PointsReward")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChallengeId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("AESP.Repository.Models.Chapter", b =>
                {
                    b.Property<Guid>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfModule")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChapterId");

                    b.HasIndex("TopicId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("AESP.Repository.Models.ChapterModule", b =>
                {
                    b.Property<Guid>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterModules");
                });

            modelBuilder.Entity("AESP.Repository.Models.ChoiceOption", b =>
                {
                    b.Property<Guid>("ChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChoiceId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ChoiceOptions");
                });

            modelBuilder.Entity("AESP.Repository.Models.ChoiceStudent", b =>
                {
                    b.Property<Guid>("ChoiceStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChosen")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChoiceStudentId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentAnswerId");

                    b.ToTable("ChoiceStudent");
                });

            modelBuilder.Entity("AESP.Repository.Models.ContentLibrary", b =>
                {
                    b.Property<Guid>("ContentLibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentLibraryId");

                    b.HasIndex("MentorProfileId");

                    b.ToTable("ContentLibraries");
                });

            modelBuilder.Entity("AESP.Repository.Models.ConversationTopic", b =>
                {
                    b.Property<Guid>("ConversationTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationTopicCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConversationTopicId");

                    b.HasIndex("ConversationTopicCategoryId");

                    b.ToTable("ConversationTopics");
                });

            modelBuilder.Entity("AESP.Repository.Models.ConversationTopicCategory", b =>
                {
                    b.Property<Guid>("ConversationTopicCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConversationTopicCategoryId");

                    b.ToTable("ConversationTopicCategories");
                });

            modelBuilder.Entity("AESP.Repository.Models.CorrectMatch", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchId");

                    b.HasIndex("AnswerOptionId");

                    b.HasIndex("ImageOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("CorrectMatches");
                });

            modelBuilder.Entity("AESP.Repository.Models.EvaluationDetail", b =>
                {
                    b.Property<Guid>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<double>("Pronunciation")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvaluationId");

                    b.HasIndex("StudentAnswerId");

                    b.ToTable("EvaluationDetails");
                });

            modelBuilder.Entity("AESP.Repository.Models.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FeedbackId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("AESP.Repository.Models.GoalSetting", b =>
                {
                    b.Property<Guid>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DailyMinutes")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GoalId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("GoalSettings");
                });

            modelBuilder.Entity("AESP.Repository.Models.GroupPracticeDetail", b =>
                {
                    b.Property<Guid>("GroupPracticeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrammarCorrection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PronunciationScore")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("VocabularySuggest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupPracticeDetailId");

                    b.HasIndex("GroupSessionId");

                    b.ToTable("GroupPracticeDetails");
                });

            modelBuilder.Entity("AESP.Repository.Models.GroupSession", b =>
                {
                    b.Property<Guid>("GroupSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupSessionId");

                    b.HasIndex("ConversationTopicId");

                    b.HasIndex("RoomId");

                    b.ToTable("GroupSessions");
                });

            modelBuilder.Entity("AESP.Repository.Models.GroupSessionMember", b =>
                {
                    b.Property<Guid>("GroupSessionMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LeaveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleInSession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupSessionMemberId");

                    b.HasIndex("GroupSessionId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("GroupSessionMembers");
                });

            modelBuilder.Entity("AESP.Repository.Models.ImageOption", b =>
                {
                    b.Property<Guid>("ImageOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImageOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ImageOptions");
                });

            modelBuilder.Entity("AESP.Repository.Models.Leaderboard", b =>
                {
                    b.Property<Guid>("LeaderboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Streak")
                        .HasColumnType("int");

                    b.HasKey("LeaderboardId");

                    b.HasIndex("LearnerProfileId")
                        .IsUnique();

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerAchievement", b =>
                {
                    b.Property<Guid>("LearnerAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EarnedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LearnerAchievementId");

                    b.HasIndex("AchievementId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("LearnerAchievements");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerChallenge", b =>
                {
                    b.Property<Guid>("LearnerChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChallengeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletionStatus")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LearnerChallengeId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("GoalId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("LearnerChallenges");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerProfile", b =>
                {
                    b.Property<Guid>("LearnerProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Favorite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PronunciationScore")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LearnerProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("LearnerProfiles");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPath", b =>
                {
                    b.Property<Guid>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("NumberOfTopic")
                        .HasColumnType("float");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PathId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("LearningPaths");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathChapter", b =>
                {
                    b.Property<Guid>("LearningPathChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearningPathTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfModule")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearningPathChapterId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("LearningPathTopicId");

                    b.ToTable("LearningPathChapters");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathModule", b =>
                {
                    b.Property<Guid>("LearningPathModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearningPathChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<double>("ScoreAchieved")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearningPathModuleId");

                    b.HasIndex("LearningPathChapterId");

                    b.HasIndex("ModuleId");

                    b.ToTable("LearningPathModules");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathTopic", b =>
                {
                    b.Property<Guid>("LearningPathTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfChapter")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LearningPathTopicId");

                    b.HasIndex("PathId");

                    b.HasIndex("TopicId");

                    b.ToTable("LearningPathTopics");
                });

            modelBuilder.Entity("AESP.Repository.Models.MentorProfile", b =>
                {
                    b.Property<Guid>("MentorProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeachingMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoiceStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MentorProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MentorProfiles");
                });

            modelBuilder.Entity("AESP.Repository.Models.MentorSchedule", b =>
                {
                    b.Property<Guid>("MentorScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MentorProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MentorScheduleId");

                    b.HasIndex("MentorProfileId");

                    b.ToTable("MentorSchedules");
                });

            modelBuilder.Entity("AESP.Repository.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AESP.Repository.Models.Period", b =>
                {
                    b.Property<Guid>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PeriodId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("AESP.Repository.Models.PracticeDetail", b =>
                {
                    b.Property<Guid>("PracticeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GrammarCorrection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PracticeSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PronunciationScore")
                        .HasColumnType("float");

                    b.Property<string>("Sentence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transcript")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PracticeDetailId");

                    b.HasIndex("PracticeSessionId");

                    b.ToTable("PracticeDetails");
                });

            modelBuilder.Entity("AESP.Repository.Models.PracticeSession", b =>
                {
                    b.Property<Guid>("PracticeSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PracticeSessionId");

                    b.HasIndex("ConversationTopicId");

                    b.HasIndex("LearnerProfileId");

                    b.HasIndex("RoomId");

                    b.ToTable("PracticeSessions");
                });

            modelBuilder.Entity("AESP.Repository.Models.ProgressAnalytics", b =>
                {
                    b.Property<Guid>("ProgressAnalyticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ConfidenceLevel")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<double>("GrammarAccuracy")
                        .HasColumnType("float");

                    b.Property<string>("HeatmapData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PronunciationScoreAvg")
                        .HasColumnType("float");

                    b.Property<int>("SessionsCompleted")
                        .HasColumnType("int");

                    b.Property<double>("SpeakingTime")
                        .HasColumnType("float");

                    b.Property<int>("StreakDays")
                        .HasColumnType("int");

                    b.Property<double>("VocabularyUsage")
                        .HasColumnType("float");

                    b.HasKey("ProgressAnalyticsId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("ProgressAnalytics");
                });

            modelBuilder.Entity("AESP.Repository.Models.PronunciationResult", b =>
                {
                    b.Property<Guid>("PronunciationResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AccuracyScore")
                        .HasColumnType("float");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpectedSound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearnerSound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("WordOrPhoneme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PronunciationResultId");

                    b.HasIndex("AssessmentId");

                    b.ToTable("PronunciationResults");
                });

            modelBuilder.Entity("AESP.Repository.Models.Purchase", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PurchaseId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("AESP.Repository.Models.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AESP.Repository.Models.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PerformanceSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("LearnerProfileId");

                    b.HasIndex("PeriodId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("AESP.Repository.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Learner"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Mentor"
                        });
                });

            modelBuilder.Entity("AESP.Repository.Models.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("AESP.Repository.Models.SendToLearner", b =>
                {
                    b.Property<Guid>("SendToLearnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentLibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SendToLearnerId");

                    b.HasIndex("ContentLibraryId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("SendToLearners");
                });

            modelBuilder.Entity("AESP.Repository.Models.ServicePackage", b =>
                {
                    b.Property<Guid>("ServicePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfMentorMeeting")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("WithMentor")
                        .HasColumnType("bit");

                    b.HasKey("ServicePackageId");

                    b.ToTable("ServicePackages");
                });

            modelBuilder.Entity("AESP.Repository.Models.Skill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("AESP.Repository.Models.SkillMentor", b =>
                {
                    b.Property<Guid>("SkillMentorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsExpertised")
                        .HasColumnType("bit");

                    b.Property<Guid>("MentorProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SkillMentorId");

                    b.HasIndex("MentorProfileId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillMentors");
                });

            modelBuilder.Entity("AESP.Repository.Models.StudentAnswer", b =>
                {
                    b.Property<Guid>("StudentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnswerOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AudioRecordingUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ChoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExplainTheWrongForVoice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PathModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ScoreForVoice")
                        .HasColumnType("float");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TranscriptText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentAnswerId");

                    b.HasIndex("AnswerOptionId");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("ImageOptionId");

                    b.HasIndex("LearnerProfileId");

                    b.HasIndex("PathModuleId");

                    b.HasIndex("QuestionId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("AESP.Repository.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LearnerProfileId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("AESP.Repository.Models.SystemPolicy", b =>
                {
                    b.Property<Guid>("SystemPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SystemPolicyId");

                    b.HasIndex("UserId");

                    b.ToTable("SystemPolicies");
                });

            modelBuilder.Entity("AESP.Repository.Models.TeachingCertificate", b =>
                {
                    b.Property<Guid>("TeachingCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeachingCertificateId");

                    b.HasIndex("MentorProfileId");

                    b.ToTable("TeachingCertificate");
                });

            modelBuilder.Entity("AESP.Repository.Models.Topic", b =>
                {
                    b.Property<Guid>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfChapter")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("AESP.Repository.Models.Type", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("AESP.Repository.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AESP.Repository.Models.AnswerOption", b =>
                {
                    b.HasOne("AESP.Repository.Models.Question", "Questions")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AESP.Repository.Models.Assessment", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("Assessments")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.AssessmentDetail", b =>
                {
                    b.HasOne("AESP.Repository.Models.Assessment", "Assessment")
                        .WithMany("AssessmentDetails")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Question", "Question")
                        .WithMany("AssessmentDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AESP.Repository.Models.Booking", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("Bookings")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.MentorSchedule", "MentorSchedule")
                        .WithMany("Bookings")
                        .HasForeignKey("MentorScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.PracticeSession", "PracticeSession")
                        .WithOne("Booking")
                        .HasForeignKey("AESP.Repository.Models.Booking", "PracticeSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");

                    b.Navigation("MentorSchedule");

                    b.Navigation("PracticeSession");
                });

            modelBuilder.Entity("AESP.Repository.Models.Chapter", b =>
                {
                    b.HasOne("AESP.Repository.Models.Topic", "Topic")
                        .WithMany("Chapters")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("AESP.Repository.Models.ChapterModule", b =>
                {
                    b.HasOne("AESP.Repository.Models.Chapter", "Chapter")
                        .WithMany("ChapterModules")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("AESP.Repository.Models.ChoiceOption", b =>
                {
                    b.HasOne("AESP.Repository.Models.Question", "Question")
                        .WithMany("ChoiceOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AESP.Repository.Models.ChoiceStudent", b =>
                {
                    b.HasOne("AESP.Repository.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.StudentAnswer", "StudentAnswer")
                        .WithMany("ChoiceStudents")
                        .HasForeignKey("StudentAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("StudentAnswer");
                });

            modelBuilder.Entity("AESP.Repository.Models.ContentLibrary", b =>
                {
                    b.HasOne("AESP.Repository.Models.MentorProfile", "MentorProfile")
                        .WithMany("ContentLibraries")
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MentorProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.ConversationTopic", b =>
                {
                    b.HasOne("AESP.Repository.Models.ConversationTopicCategory", "ConversationTopicCategory")
                        .WithMany("ConversationTopics")
                        .HasForeignKey("ConversationTopicCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConversationTopicCategory");
                });

            modelBuilder.Entity("AESP.Repository.Models.CorrectMatch", b =>
                {
                    b.HasOne("AESP.Repository.Models.AnswerOption", "AnswerOption")
                        .WithMany("CorrectMatches")
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.ImageOption", "ImageOption")
                        .WithMany()
                        .HasForeignKey("ImageOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Question", "Question")
                        .WithMany("CorrectMatches")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("ImageOption");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AESP.Repository.Models.EvaluationDetail", b =>
                {
                    b.HasOne("AESP.Repository.Models.StudentAnswer", "StudentAnswer")
                        .WithMany("EvaluationDataVoice")
                        .HasForeignKey("StudentAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentAnswer");
                });

            modelBuilder.Entity("AESP.Repository.Models.Feedback", b =>
                {
                    b.HasOne("AESP.Repository.Models.Type", "Type")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AESP.Repository.Models.GoalSetting", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("GoalSettings")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.GroupPracticeDetail", b =>
                {
                    b.HasOne("AESP.Repository.Models.GroupSession", "GroupSession")
                        .WithMany("GroupPracticeDetails")
                        .HasForeignKey("GroupSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GroupSession");
                });

            modelBuilder.Entity("AESP.Repository.Models.GroupSession", b =>
                {
                    b.HasOne("AESP.Repository.Models.ConversationTopic", "ConversationTopic")
                        .WithMany("GroupSessions")
                        .HasForeignKey("ConversationTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Room", "Room")
                        .WithMany("GroupSessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConversationTopic");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("AESP.Repository.Models.GroupSessionMember", b =>
                {
                    b.HasOne("AESP.Repository.Models.GroupSession", "GroupSession")
                        .WithMany("GroupSessionMembers")
                        .HasForeignKey("GroupSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("GroupSessionMembers")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GroupSession");

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.ImageOption", b =>
                {
                    b.HasOne("AESP.Repository.Models.Question", "Question")
                        .WithMany("ImageOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AESP.Repository.Models.Leaderboard", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithOne("Leaderboard")
                        .HasForeignKey("AESP.Repository.Models.Leaderboard", "LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerAchievement", b =>
                {
                    b.HasOne("AESP.Repository.Models.Achievement", "Achievement")
                        .WithMany("LearnerAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("LearnerAchievements")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerChallenge", b =>
                {
                    b.HasOne("AESP.Repository.Models.Challenge", "Challenge")
                        .WithMany("LearnerChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.GoalSetting", "Goal")
                        .WithMany("LearnerChallenges")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("LearnerChallenges")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Goal");

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerProfile", b =>
                {
                    b.HasOne("AESP.Repository.Models.User", "User")
                        .WithOne("LearnerProfile")
                        .HasForeignKey("AESP.Repository.Models.LearnerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPath", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("LearningPaths")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathChapter", b =>
                {
                    b.HasOne("AESP.Repository.Models.Chapter", "Chapter")
                        .WithMany("LearningPathChapters")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.LearningPathTopic", "LearningPathTopic")
                        .WithMany("LearningPathChapters")
                        .HasForeignKey("LearningPathTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("LearningPathTopic");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathModule", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearningPathChapter", "LearningPathChapter")
                        .WithMany("LearningPathModules")
                        .HasForeignKey("LearningPathChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.ChapterModule", "ChapterModule")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChapterModule");

                    b.Navigation("LearningPathChapter");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathTopic", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearningPath", "LearningPath")
                        .WithMany("LearningPathTopics")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Topic", "Topic")
                        .WithMany("LearningPathTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearningPath");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("AESP.Repository.Models.MentorProfile", b =>
                {
                    b.HasOne("AESP.Repository.Models.User", "User")
                        .WithOne("MentorProfile")
                        .HasForeignKey("AESP.Repository.Models.MentorProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AESP.Repository.Models.MentorSchedule", b =>
                {
                    b.HasOne("AESP.Repository.Models.MentorProfile", "MentorProfile")
                        .WithMany("MentorSchedules")
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MentorProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.Notification", b =>
                {
                    b.HasOne("AESP.Repository.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AESP.Repository.Models.PracticeDetail", b =>
                {
                    b.HasOne("AESP.Repository.Models.PracticeSession", "PracticeSession")
                        .WithMany("PracticeDetails")
                        .HasForeignKey("PracticeSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PracticeSession");
                });

            modelBuilder.Entity("AESP.Repository.Models.PracticeSession", b =>
                {
                    b.HasOne("AESP.Repository.Models.ConversationTopic", "ConversationTopic")
                        .WithMany("PracticeSessions")
                        .HasForeignKey("ConversationTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("PracticeSessions")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Room", "Room")
                        .WithMany("PracticeSessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConversationTopic");

                    b.Navigation("LearnerProfile");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("AESP.Repository.Models.ProgressAnalytics", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("ProgressAnalytics")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.PronunciationResult", b =>
                {
                    b.HasOne("AESP.Repository.Models.Assessment", "Assessment")
                        .WithMany("PronunciationResults")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("AESP.Repository.Models.Purchase", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("Purchases")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.Question", b =>
                {
                    b.HasOne("AESP.Repository.Models.Chapter", null)
                        .WithMany("Questions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AESP.Repository.Models.ChapterModule", "ChapterModule")
                        .WithMany("Questions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChapterModule");
                });

            modelBuilder.Entity("AESP.Repository.Models.Report", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("Reports")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Period", "Period")
                        .WithMany("Reports")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("AESP.Repository.Models.SendToLearner", b =>
                {
                    b.HasOne("AESP.Repository.Models.ContentLibrary", "ContentLibrary")
                        .WithMany("SendToLearners")
                        .HasForeignKey("ContentLibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("SendToLearners")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentLibrary");

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.SkillMentor", b =>
                {
                    b.HasOne("AESP.Repository.Models.MentorProfile", "MentorProfile")
                        .WithMany()
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Skill", "Skill")
                        .WithMany("SkillMentors")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MentorProfile");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("AESP.Repository.Models.StudentAnswer", b =>
                {
                    b.HasOne("AESP.Repository.Models.AnswerOption", "AnswerOption")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AESP.Repository.Models.ChoiceOption", "ChoiceOption")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AESP.Repository.Models.ImageOption", "ImageOption")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("ImageOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.LearningPathModule", "LearningPathModule")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("PathModuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AESP.Repository.Models.Question", "Question")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("ChoiceOption");

                    b.Navigation("ImageOption");

                    b.Navigation("LearnerProfile");

                    b.Navigation("LearningPathModule");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AESP.Repository.Models.Subscription", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("Subscriptions")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AESP.Repository.Models.ServicePackage", "ServicePackage")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");

                    b.Navigation("Purchase");

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("AESP.Repository.Models.SystemPolicy", b =>
                {
                    b.HasOne("AESP.Repository.Models.User", "User")
                        .WithMany("SystemPolicies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AESP.Repository.Models.TeachingCertificate", b =>
                {
                    b.HasOne("AESP.Repository.Models.MentorProfile", "MentorProfile")
                        .WithMany("TeachingCertificates")
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MentorProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.User", b =>
                {
                    b.HasOne("AESP.Repository.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AESP.Repository.Models.Achievement", b =>
                {
                    b.Navigation("LearnerAchievements");
                });

            modelBuilder.Entity("AESP.Repository.Models.AnswerOption", b =>
                {
                    b.Navigation("CorrectMatches");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("AESP.Repository.Models.Assessment", b =>
                {
                    b.Navigation("AssessmentDetails");

                    b.Navigation("PronunciationResults");
                });

            modelBuilder.Entity("AESP.Repository.Models.Challenge", b =>
                {
                    b.Navigation("LearnerChallenges");
                });

            modelBuilder.Entity("AESP.Repository.Models.Chapter", b =>
                {
                    b.Navigation("ChapterModules");

                    b.Navigation("LearningPathChapters");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AESP.Repository.Models.ChapterModule", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AESP.Repository.Models.ChoiceOption", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("AESP.Repository.Models.ContentLibrary", b =>
                {
                    b.Navigation("SendToLearners");
                });

            modelBuilder.Entity("AESP.Repository.Models.ConversationTopic", b =>
                {
                    b.Navigation("GroupSessions");

                    b.Navigation("PracticeSessions");
                });

            modelBuilder.Entity("AESP.Repository.Models.ConversationTopicCategory", b =>
                {
                    b.Navigation("ConversationTopics");
                });

            modelBuilder.Entity("AESP.Repository.Models.GoalSetting", b =>
                {
                    b.Navigation("LearnerChallenges");
                });

            modelBuilder.Entity("AESP.Repository.Models.GroupSession", b =>
                {
                    b.Navigation("GroupPracticeDetails");

                    b.Navigation("GroupSessionMembers");
                });

            modelBuilder.Entity("AESP.Repository.Models.ImageOption", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerProfile", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Bookings");

                    b.Navigation("GoalSettings");

                    b.Navigation("GroupSessionMembers");

                    b.Navigation("Leaderboard")
                        .IsRequired();

                    b.Navigation("LearnerAchievements");

                    b.Navigation("LearnerChallenges");

                    b.Navigation("LearningPaths");

                    b.Navigation("PracticeSessions");

                    b.Navigation("ProgressAnalytics");

                    b.Navigation("Purchases");

                    b.Navigation("Reports");

                    b.Navigation("SendToLearners");

                    b.Navigation("StudentAnswers");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPath", b =>
                {
                    b.Navigation("LearningPathTopics");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathChapter", b =>
                {
                    b.Navigation("LearningPathModules");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathModule", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathTopic", b =>
                {
                    b.Navigation("LearningPathChapters");
                });

            modelBuilder.Entity("AESP.Repository.Models.MentorProfile", b =>
                {
                    b.Navigation("ContentLibraries");

                    b.Navigation("MentorSchedules");

                    b.Navigation("TeachingCertificates");
                });

            modelBuilder.Entity("AESP.Repository.Models.MentorSchedule", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("AESP.Repository.Models.Period", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("AESP.Repository.Models.PracticeSession", b =>
                {
                    b.Navigation("Booking")
                        .IsRequired();

                    b.Navigation("PracticeDetails");
                });

            modelBuilder.Entity("AESP.Repository.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("AssessmentDetails");

                    b.Navigation("ChoiceOptions");

                    b.Navigation("CorrectMatches");

                    b.Navigation("ImageOptions");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("AESP.Repository.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AESP.Repository.Models.Room", b =>
                {
                    b.Navigation("GroupSessions");

                    b.Navigation("PracticeSessions");
                });

            modelBuilder.Entity("AESP.Repository.Models.ServicePackage", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("AESP.Repository.Models.Skill", b =>
                {
                    b.Navigation("SkillMentors");
                });

            modelBuilder.Entity("AESP.Repository.Models.StudentAnswer", b =>
                {
                    b.Navigation("ChoiceStudents");

                    b.Navigation("EvaluationDataVoice");
                });

            modelBuilder.Entity("AESP.Repository.Models.Topic", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("LearningPathTopics");
                });

            modelBuilder.Entity("AESP.Repository.Models.Type", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("AESP.Repository.Models.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("LearnerProfile")
                        .IsRequired();

                    b.Navigation("MentorProfile")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("SystemPolicies");
                });
#pragma warning restore 612, 618
        }
    }
}
