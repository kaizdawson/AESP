// <auto-generated />
using System;
using AESP.Repository.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AESP.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251006083659_FixAllDBNew")]
    partial class FixAllDBNew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AESP.Repository.Models.Assessment", b =>
                {
                    b.Property<Guid>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssessmentId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("AESP.Repository.Models.AssessmentDetail", b =>
                {
                    b.Property<Guid>("AssessmentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AI_Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerAudio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionAssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssessmentDetailId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("QuestionAssessmentId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AssessmentDetails");
                });

            modelBuilder.Entity("AESP.Repository.Models.Certificate", b =>
                {
                    b.Property<Guid>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReviewerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificateId");

                    b.HasIndex("ReviewerProfileId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("AESP.Repository.Models.Chapter", b =>
                {
                    b.Property<Guid>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfExercise")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChapterId");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("AESP.Repository.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfChapter")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AESP.Repository.Models.Exercise", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseId");

                    b.HasIndex("ChapterId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("AESP.Repository.Models.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServicePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("ServicePackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerAnswer", b =>
                {
                    b.Property<Guid>("LearnerAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LearnerAnswerId");

                    b.HasIndex("LearnerProfileId");

                    b.HasIndex("QuestionId");

                    b.ToTable("LearnerAnswers");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerCourse", b =>
                {
                    b.Property<Guid>("LearnerCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LearnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfCourse")
                        .HasColumnType("int");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearnerCourseId");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearnerCourses");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerProfile", b =>
                {
                    b.Property<Guid>("LearnerProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DailyMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PronunciationScore")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LearnerProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("LearnerProfiles");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerRecordCategory", b =>
                {
                    b.Property<Guid>("LearnerRecordCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LearnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearnerRecordCategoryId");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearnerRecordCategories");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathChapter", b =>
                {
                    b.Property<Guid>("LearningPathChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearningPathCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfModule")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearningPathChapterId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("LearningPathCourseId");

                    b.ToTable("LearningPathChapters");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathCourse", b =>
                {
                    b.Property<Guid>("LearningPathCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfChapter")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearningPathCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearnerCourseId");

                    b.ToTable("LearningPathCourses");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathExercise", b =>
                {
                    b.Property<Guid>("LearningPathExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearningPathChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<double>("ScoreAchieved")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearningPathExerciseId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("LearningPathChapterId");

                    b.ToTable("LearningPathExercises");
                });

            modelBuilder.Entity("AESP.Repository.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AESP.Repository.Models.PhonemeResult", b =>
                {
                    b.Property<Guid>("PhonemeResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhonemeResultId");

                    b.HasIndex("LearnerAnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PhonemeResults");
                });

            modelBuilder.Entity("AESP.Repository.Models.PhonemeTemplate", b =>
                {
                    b.Property<Guid>("PhonemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhonemeId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PhonemeTemplates");
                });

            modelBuilder.Entity("AESP.Repository.Models.ProgressAnalytics", b =>
                {
                    b.Property<Guid>("ProgressAnalyticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ConfidenceLevel")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<string>("HeatmapData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PronunciationScoreAvg")
                        .HasColumnType("float");

                    b.Property<int>("SessionsCompleted")
                        .HasColumnType("int");

                    b.Property<double>("SpeakingTime")
                        .HasColumnType("float");

                    b.Property<int>("StreakDays")
                        .HasColumnType("int");

                    b.HasKey("ProgressAnalyticsId");

                    b.HasIndex("LearnerProfileId");

                    b.ToTable("ProgressAnalytics");
                });

            modelBuilder.Entity("AESP.Repository.Models.PronunciationResult", b =>
                {
                    b.Property<Guid>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AccuracyScore")
                        .HasColumnType("float");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpectedSound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearnerSound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("WordOrPhoneme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultId");

                    b.HasIndex("AssessmentId");

                    b.ToTable("PronunciationResults");
                });

            modelBuilder.Entity("AESP.Repository.Models.Purchase", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceReviewFee")
                        .HasColumnType("float");

                    b.Property<double>("PriceServicePackage")
                        .HasColumnType("float");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReviewFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchaseId");

                    b.HasIndex("LearnerId");

                    b.HasIndex("ReviewFeeId");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("AESP.Repository.Models.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IPA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("PhonemeJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AESP.Repository.Models.QuestionAssessment", b =>
                {
                    b.Property<Guid>("QuestionAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionAssessmentId");

                    b.ToTable("QuestionAssessments");
                });

            modelBuilder.Entity("AESP.Repository.Models.QuestionMedia", b =>
                {
                    b.Property<Guid>("QuestionMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Accent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionMediaId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionMedias");
                });

            modelBuilder.Entity("AESP.Repository.Models.Record", b =>
                {
                    b.Property<Guid>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AIFeedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudioRecordingURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LearnerRecordCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecordId");

                    b.HasIndex("LearnerRecordCategoryId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("AESP.Repository.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AESP.Repository.Models.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LearnerAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("LearnerAnswerId");

                    b.HasIndex("RecordId");

                    b.HasIndex("ReviewerProfileId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("AESP.Repository.Models.ReviewFee", b =>
                {
                    b.Property<Guid>("ReviewFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ReviewFeeId");

                    b.ToTable("ReviewFees");
                });

            modelBuilder.Entity("AESP.Repository.Models.ReviewerProfile", b =>
                {
                    b.Property<Guid>("ReviewerProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Levels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewerProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("WalletId");

                    b.ToTable("ReviewerProfiles");
                });

            modelBuilder.Entity("AESP.Repository.Models.ServicePackage", b =>
                {
                    b.Property<Guid>("ServicePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicePackageId");

                    b.ToTable("ServicePackages");
                });

            modelBuilder.Entity("AESP.Repository.Models.Stress", b =>
                {
                    b.Property<Guid>("StressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhonemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StressType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SyllableIndex")
                        .HasColumnType("int");

                    b.HasKey("StressId");

                    b.HasIndex("PhonemeId");

                    b.ToTable("Stresses");
                });

            modelBuilder.Entity("AESP.Repository.Models.StressResult", b =>
                {
                    b.Property<Guid>("StressResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhonemeResultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StressResultId");

                    b.HasIndex("PhonemeResultId");

                    b.ToTable("StressResults");
                });

            modelBuilder.Entity("AESP.Repository.Models.SubServicePackage", b =>
                {
                    b.Property<Guid>("SubServicePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubServicePackageId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("SubServicePackages");
                });

            modelBuilder.Entity("AESP.Repository.Models.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LearnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("LearnerProfileId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("AESP.Repository.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTransaction")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonWithdrawReject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionEnum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AESP.Repository.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AESP.Repository.Models.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.HasKey("WalletId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("AESP.Repository.Models.Assessment", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("Assessments")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.AssessmentDetail", b =>
                {
                    b.HasOne("AESP.Repository.Models.Assessment", "Assessment")
                        .WithMany("AssessmentDetails")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.QuestionAssessment", "QuestionAssessment")
                        .WithMany("AssessmentDetails")
                        .HasForeignKey("QuestionAssessmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Question", null)
                        .WithMany("AssessmentDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Assessment");

                    b.Navigation("QuestionAssessment");
                });

            modelBuilder.Entity("AESP.Repository.Models.Certificate", b =>
                {
                    b.HasOne("AESP.Repository.Models.ReviewerProfile", "ReviewerProfile")
                        .WithMany("Certificates")
                        .HasForeignKey("ReviewerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.Chapter", b =>
                {
                    b.HasOne("AESP.Repository.Models.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("AESP.Repository.Models.Exercise", b =>
                {
                    b.HasOne("AESP.Repository.Models.Chapter", "Chapter")
                        .WithMany("Exercises")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("AESP.Repository.Models.Feedback", b =>
                {
                    b.HasOne("AESP.Repository.Models.Review", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AESP.Repository.Models.ServicePackage", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AESP.Repository.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerAnswer", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "Learner")
                        .WithMany("LearnerAnswers")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Question", "Question")
                        .WithMany("LearnerAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Learner");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerCourse", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("LearnerCourses")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerProfile", b =>
                {
                    b.HasOne("AESP.Repository.Models.User", "User")
                        .WithOne("LearnerProfile")
                        .HasForeignKey("AESP.Repository.Models.LearnerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerRecordCategory", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("LearnerRecordCategories")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathChapter", b =>
                {
                    b.HasOne("AESP.Repository.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.LearningPathCourse", "LearningPathCourse")
                        .WithMany("LearningPathChapters")
                        .HasForeignKey("LearningPathCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("LearningPathCourse");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathCourse", b =>
                {
                    b.HasOne("AESP.Repository.Models.Course", "Course")
                        .WithMany("LearningPathCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.LearnerCourse", "LearnerCourse")
                        .WithMany()
                        .HasForeignKey("LearnerCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("LearnerCourse");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathExercise", b =>
                {
                    b.HasOne("AESP.Repository.Models.Exercise", "Exercise")
                        .WithMany("LearningPathExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.LearningPathChapter", "LearningPathChapter")
                        .WithMany("LearningPathExercises")
                        .HasForeignKey("LearningPathChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("LearningPathChapter");
                });

            modelBuilder.Entity("AESP.Repository.Models.Notification", b =>
                {
                    b.HasOne("AESP.Repository.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AESP.Repository.Models.PhonemeResult", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerAnswer", "LearnerAnswer")
                        .WithMany("PhonemeResults")
                        .HasForeignKey("LearnerAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Question", "Question")
                        .WithMany("PhonemeResults")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerAnswer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AESP.Repository.Models.PhonemeTemplate", b =>
                {
                    b.HasOne("AESP.Repository.Models.Question", "Question")
                        .WithMany("PhonemeTemplates")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AESP.Repository.Models.ProgressAnalytics", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "Learner")
                        .WithMany("ProgressAnalytics")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("AESP.Repository.Models.PronunciationResult", b =>
                {
                    b.HasOne("AESP.Repository.Models.Assessment", "Assessment")
                        .WithMany("PronunciationResults")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("AESP.Repository.Models.Purchase", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("Purchases")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.ReviewFee", "ReviewFee")
                        .WithMany("Purchases")
                        .HasForeignKey("ReviewFeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Subscription", "Subscription")
                        .WithOne("Purchase")
                        .HasForeignKey("AESP.Repository.Models.Purchase", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");

                    b.Navigation("ReviewFee");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("AESP.Repository.Models.Question", b =>
                {
                    b.HasOne("AESP.Repository.Models.Exercise", "Exercise")
                        .WithMany("Questions")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("AESP.Repository.Models.QuestionMedia", b =>
                {
                    b.HasOne("AESP.Repository.Models.Question", "Question")
                        .WithMany("QuestionMedias")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AESP.Repository.Models.Record", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerRecordCategory", "LearnerRecordCategory")
                        .WithMany("Records")
                        .HasForeignKey("LearnerRecordCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerRecordCategory");
                });

            modelBuilder.Entity("AESP.Repository.Models.RefreshToken", b =>
                {
                    b.HasOne("AESP.Repository.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AESP.Repository.Models.Review", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerAnswer", "LearnerAnswer")
                        .WithMany("Reviews")
                        .HasForeignKey("LearnerAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Record", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.ReviewerProfile", "ReviewerProfile")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerAnswer");

                    b.Navigation("Record");

                    b.Navigation("ReviewerProfile");
                });

            modelBuilder.Entity("AESP.Repository.Models.ReviewerProfile", b =>
                {
                    b.HasOne("AESP.Repository.Models.User", "User")
                        .WithOne("ReviewerProfile")
                        .HasForeignKey("AESP.Repository.Models.ReviewerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("AESP.Repository.Models.Stress", b =>
                {
                    b.HasOne("AESP.Repository.Models.PhonemeTemplate", "PhonemeTemplate")
                        .WithMany("Stresses")
                        .HasForeignKey("PhonemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PhonemeTemplate");
                });

            modelBuilder.Entity("AESP.Repository.Models.StressResult", b =>
                {
                    b.HasOne("AESP.Repository.Models.PhonemeResult", "PhonemeResult")
                        .WithMany("StressResults")
                        .HasForeignKey("PhonemeResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PhonemeResult");
                });

            modelBuilder.Entity("AESP.Repository.Models.SubServicePackage", b =>
                {
                    b.HasOne("AESP.Repository.Models.ServicePackage", "ServicePackage")
                        .WithMany("SubServicePackages")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("AESP.Repository.Models.Subscription", b =>
                {
                    b.HasOne("AESP.Repository.Models.LearnerProfile", "LearnerProfile")
                        .WithMany("Subscriptions")
                        .HasForeignKey("LearnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AESP.Repository.Models.ServicePackage", "ServicePackage")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnerProfile");

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("AESP.Repository.Models.Transaction", b =>
                {
                    b.HasOne("AESP.Repository.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("AESP.Repository.Models.Assessment", b =>
                {
                    b.Navigation("AssessmentDetails");

                    b.Navigation("PronunciationResults");
                });

            modelBuilder.Entity("AESP.Repository.Models.Chapter", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("AESP.Repository.Models.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("LearningPathCourses");
                });

            modelBuilder.Entity("AESP.Repository.Models.Exercise", b =>
                {
                    b.Navigation("LearningPathExercises");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerAnswer", b =>
                {
                    b.Navigation("PhonemeResults");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerProfile", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("LearnerAnswers");

                    b.Navigation("LearnerCourses");

                    b.Navigation("LearnerRecordCategories");

                    b.Navigation("ProgressAnalytics");

                    b.Navigation("Purchases");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearnerRecordCategory", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathChapter", b =>
                {
                    b.Navigation("LearningPathExercises");
                });

            modelBuilder.Entity("AESP.Repository.Models.LearningPathCourse", b =>
                {
                    b.Navigation("LearningPathChapters");
                });

            modelBuilder.Entity("AESP.Repository.Models.PhonemeResult", b =>
                {
                    b.Navigation("StressResults");
                });

            modelBuilder.Entity("AESP.Repository.Models.PhonemeTemplate", b =>
                {
                    b.Navigation("Stresses");
                });

            modelBuilder.Entity("AESP.Repository.Models.Question", b =>
                {
                    b.Navigation("AssessmentDetails");

                    b.Navigation("LearnerAnswers");

                    b.Navigation("PhonemeResults");

                    b.Navigation("PhonemeTemplates");

                    b.Navigation("QuestionMedias");
                });

            modelBuilder.Entity("AESP.Repository.Models.QuestionAssessment", b =>
                {
                    b.Navigation("AssessmentDetails");
                });

            modelBuilder.Entity("AESP.Repository.Models.Review", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("AESP.Repository.Models.ReviewFee", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("AESP.Repository.Models.ReviewerProfile", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AESP.Repository.Models.ServicePackage", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("SubServicePackages");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("AESP.Repository.Models.Subscription", b =>
                {
                    b.Navigation("Purchase")
                        .IsRequired();
                });

            modelBuilder.Entity("AESP.Repository.Models.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("LearnerProfile")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ReviewerProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("AESP.Repository.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
